{"version":3,"sources":["Sounds/beepSound.wav","Sounds/beepSound2.wav","Visualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SortingVisualizer","useState","primaryArray","setPrimaryArray","animationSpeed","setAnimationSpeed","soundOn","setSoundOn","algorithm","setAlgorithm","useSound","beepSound","volume","playBeep1","beepSound2","playBeep2","randomizeArray","i","length","document","getElementById","style","backgroundColor","array","push","randomVals","min","max","Math","floor","random","useEffect","sleep","milliseconds","Promise","resolve","setTimeout","finishedAnimation","a","currentArr","sorted","name","timeComplexity","swap1","swap2","bar1","bar2","arr","index","lastChild","heapify","largest","rightNode","leftNode","mergeSortHelper","mainArray","startIdx","endIdx","auxiliaryArray","middleIdx","doMerge","k","j","midIndex","endIndex","mergeBack","sort","left","right","partitionIndex","partition","pivot","temp","className","onClick","slice","mergeSort","id","window","location","reload","defaultChecked","icons","onChange","map","val","key","height","undefined","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.398c3612.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beepSound.1068a0ce.wav\";","module.exports = __webpack_public_path__ + \"static/media/beepSound2.53cd88a4.wav\";","import React, { useState, useEffect, useRef } from \"react\";\nimport useSound from \"use-sound\";\nimport beepSound from \"../Sounds/beepSound.wav\";\nimport beepSound2 from \"../Sounds/beepSound2.wav\";\n\nimport Toggle from \"react-toggle\";\nimport \"react-toggle/style.css\";\n\n//Change At Will\nconst ARRAYSIZE = 100;\n\nexport default function SortingVisualizer() {\n  //Array Used to Sort\n  const [primaryArray, setPrimaryArray] = useState([]);\n\n  //Animation Speed\n  const [animationSpeed, setAnimationSpeed] = useState(40);\n\n  const [soundOn, setSoundOn] = useState(true);\n\n  //AlgorithmChosen\n  const [algorithm, setAlgorithm] = useState({});\n\n  // Sound Effects\n  const [playBeep1] = useSound(beepSound, { volume: soundOn ? 0.15 : 0 });\n  const [playBeep2] = useSound(beepSound2, { volume: soundOn ? 0.05 : 0 });\n\n  //Initial Random Array\n  useEffect(() => {\n    randomizeArray();\n  }, []);\n\n  /* Requires: Array size is set\n   * Effect: Generates a random array with values from 20 to 400 and changes the array state\n   */\n  function randomizeArray() {\n    for (var i = 0; i < primaryArray.length; i++) {\n      var bar = document.getElementById(i).style;\n      bar.backgroundColor = \"#ADD8E6\";\n    }\n    var array = [];\n    for (var i = 0; i < ARRAYSIZE; i++) {\n      array.push(randomVals(20, 400));\n    }\n\n    setPrimaryArray(array);\n  }\n\n  // Generates a random val between min and max\n  function randomVals(min, max) {\n    var randomVal = Math.floor(Math.random() * (max - min + 1) + min);\n    return randomVal;\n  }\n\n  //SLEEP FUNCTION --> Used to slow loop iteration\n  const sleep = (milliseconds) => {\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\n  };\n\n  //ANIMATION FOR WHEN THE SORTING IS FINISHED\n  async function finishedAnimation() {\n    for (var i = 0; i < primaryArray.length; i++) {\n      var bar = document.getElementById(i).style;\n      bar.backgroundColor = \"green\";\n      playBeep1();\n      await sleep(animationSpeed);\n    }\n  }\n\n  // ------------ ALGORITHMS ------------ //\n\n  // Bubble Sort\n  async function bubbleSort() {\n    var currentArr = primaryArray;\n\n    var sorted = false;\n\n    setAlgorithm({ name: \"Bubble Sort\", timeComplexity: \"O(n^2)\" });\n\n    while (!sorted) {\n      sorted = true;\n\n      for (var i = 0; i < currentArr.length - 1; i++) {\n        if (currentArr[i] > currentArr[i + 1]) {\n          var swap1 = currentArr[i];\n          var swap2 = currentArr[i + 1];\n          currentArr[i] = swap2;\n          currentArr[i + 1] = swap1;\n          setPrimaryArray([...primaryArray, currentArr]);\n\n          //Changes the Style while swapping\n          let bar1 = document.getElementById(i).style;\n          let bar2 = document.getElementById(i + 1).style;\n          bar1.backgroundColor = \"#DC143C\";\n          bar2.backgroundColor = \"#6A5ACD\";\n\n          await sleep(animationSpeed);\n\n          //Changes the Style back to original\n          bar1.backgroundColor = \"#ADD8E6\";\n          bar2.backgroundColor = \"#ADD8E6\";\n\n          sorted = false;\n          playBeep1();\n        }\n        playBeep2();\n      }\n      if (sorted) finishedAnimation();\n    }\n  }\n\n  //HeapSort\n  async function heapSort() {\n    var arr = primaryArray;\n\n    var length = arr.length;\n    var index = Math.floor(length / 2 - 1); //This is always the last parent in a heap\n    var lastChild = length - 1;\n\n    setAlgorithm({ name: \"Heap Sort\", timeComplexity: \"O(nlog(n))\" });\n\n    while (index >= 0) {\n      heapify(arr, length, index);\n      index--;\n\n      setPrimaryArray([...primaryArray, arr]);\n\n      //Changes the Style while swapping\n      if (index >= 0) {\n        let bar1 = document.getElementById(index).style;\n        let bar2 = document.getElementById(index + 1).style;\n        bar1.backgroundColor = \"#DC143C\";\n        bar2.backgroundColor = \"#6A5ACD\";\n\n        await sleep(animationSpeed);\n\n        playBeep1();\n        //Changes the Style back to original\n        bar1.backgroundColor = \"#ADD8E6\";\n        bar2.backgroundColor = \"#ADD8E6\";\n      } else {\n        await sleep(animationSpeed);\n      }\n    }\n\n    while (lastChild >= 0) {\n      var swap1 = arr[0];\n      var swap2 = arr[lastChild];\n\n      arr[0] = swap2;\n      arr[lastChild] = swap1;\n      heapify(arr, lastChild, 0);\n      lastChild--;\n      playBeep2();\n\n      setPrimaryArray([...primaryArray, arr]);\n\n      //Changes the Style while swapping\n      if (index >= 0) {\n        let bar1 = document.getElementById(lastChild).style;\n        let bar2 = document.getElementById(0).style;\n        bar1.backgroundColor = \"#DC143C\";\n        bar2.backgroundColor = \"#6A5ACD\";\n\n        //Changes the Style back to original\n        bar1.backgroundColor = \"#ADD8E6\";\n        bar2.backgroundColor = \"##ADD8E6\";\n      } else {\n        await sleep(animationSpeed);\n      }\n    }\n\n    // setTimeout(finishedAnimation, 2500);\n    finishedAnimation();\n  }\n\n  async function heapify(arr, length, index) {\n    //Represents larges node out of the three\n    var largest = index;\n\n    //Left Child\n    var leftNode = index * 2 + 1;\n    //Right Child\n    var rightNode = leftNode + 1;\n\n    //Check if left is largest, check if reached end\n    if (arr[leftNode] > arr[largest] && leftNode < length) {\n      largest = leftNode;\n    }\n\n    //Check if right is largest, check if reached end\n    if (arr[rightNode] > arr[largest] && rightNode < length) {\n      largest = rightNode;\n    }\n\n    //Check if parent is still largest, if not: perform a swap between the smallest and the largest\n    if (largest != index) {\n      var swap1 = arr[index];\n      var swap2 = arr[largest];\n\n      arr[index] = swap2;\n      arr[largest] = swap1;\n\n      heapify(arr, length, largest);\n    }\n\n    return arr;\n  }\n\n  /*Merge Sort\n   *\n   * Splits array recursively untill individual elements are set,\n   * Merge everything back while sorting.\n   * Time complexity = O(nlog(n))\n   *\n   * Adapted from The following version By Clement Mihailescu : https://github.com/clementmihailescu/Sorting-Visualizer-Tutorial/blob/master/src/sortingAlgorithms/sortingAlgorithms.js\n   */\n\n  function mergeSort(array) {\n    setAlgorithm({ name: \"Merge Sort\", timeComplexity: \"O(nlog(n))\" });\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n\n    //Call helper function with current sliced array\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray);\n\n    return array;\n  }\n\n  async function mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray) {\n    if (startIdx === endIdx) return;\n\n    //Get sliced array and recursively divide it untill it has single element arrays\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray);\n\n    await sleep(animationSpeed);\n    playBeep2();\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray);\n  }\n\n  //Performs merging\n  function doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n\n    while (i <= middleIdx && j <= endIdx) {\n      playBeep1();\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        //Compare values and overwrite primary array with new sorted array\n        mainArray[k++] = auxiliaryArray[i++];\n        setPrimaryArray([...primaryArray, mainArray]);\n        let bar1 = document.getElementById(k).style;\n        let bar2 = document.getElementById(i).style;\n        bar1.backgroundColor = \"#DC143C\";\n        bar2.backgroundColor = \"#6A5ACD\";\n\n        setTimeout(() => {\n          bar1.backgroundColor = \"##ADD8E6\";\n          bar2.backgroundColor = \"##ADD8E6\";\n        }, 800);\n      } else {\n        //Compare values and overwrite primary array with new sorted array\n        mainArray[k++] = auxiliaryArray[j++];\n        setPrimaryArray([...primaryArray, mainArray]);\n        let bar1 = document.getElementById(k).style;\n        let bar2 = document.getElementById(i).style;\n        bar1.backgroundColor = \"#DC143C\";\n        bar2.backgroundColor = \"#6A5ACD\";\n        setTimeout(() => {\n          bar1.backgroundColor = \"##ADD8E6\";\n          bar2.backgroundColor = \"##ADD8E6\";\n        }, 200);\n      }\n    }\n\n    mergeBack(i, j, k, middleIdx, endIdx, mainArray, auxiliaryArray);\n  }\n\n  //MergeBack and fill the sorted Array\n  function mergeBack(i, j, k, midIndex, endIndex, mainArray, auxiliaryArray) {\n    while (i <= midIndex) {\n      mainArray[k++] = auxiliaryArray[i++];\n      setPrimaryArray([...primaryArray, mainArray]);\n    }\n    while (j <= endIndex) {\n      mainArray[k++] = auxiliaryArray[j++];\n      setPrimaryArray([...primaryArray, mainArray]);\n    }\n  }\n\n  /*\n   * Quick Sort\n   *\n   *\n   *\n   *\n   *\n   *\n   */\n\n  function quickSort() {\n    setAlgorithm({ name: \"Quick Sort\", timeComplexity: \"O(nlog(n))\" });\n    var currentArr = primaryArray;\n    var left = 0;\n    var right = currentArr.length - 1;\n\n    sort(currentArr, left, right);\n    setTimeout(finishedAnimation, 2500);\n  }\n\n  async function sort(arr, left, right) {\n    if (left < right) {\n      var partitionIndex = partition(arr, left, right);\n\n      setPrimaryArray([...primaryArray, arr]);\n      await sleep(animationSpeed + 100);\n      playBeep2();\n      sort(arr, left, partitionIndex - 1);\n      sort(arr, partitionIndex + 1, right);\n    }\n  }\n\n  function partition(arr, left, right) {\n    var pivot = arr[right];\n    var i = left - 1;\n    playBeep1();\n    for (var j = left; j < right; j++) {\n      if (arr[j] < pivot) {\n        i++;\n        var temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n\n        let bar1 = document.getElementById(i).style;\n        let bar2 = document.getElementById(j).style;\n        bar1.backgroundColor = \"#DC143C\";\n        bar2.backgroundColor = \"#6A5ACD\";\n\n        setTimeout(() => {\n          bar1.backgroundColor = \"##ADD8E6\";\n          bar2.backgroundColor = \"##ADD8E6\";\n        }, 200);\n\n        setPrimaryArray([...primaryArray, arr]);\n      }\n    }\n\n    var temp = arr[i + 1];\n    arr[i + 1] = arr[right];\n    arr[right] = temp;\n\n    return i + 1;\n  }\n\n  /////RadixSort\n\n  function radixCaller() {\n    setAlgorithm({ name: \"Radix Sort\", timeComplexity: \"O(log10(n))\" });\n    var currentArr = primaryArray;\n    radixSort(currentArr);\n  }\n\n  async function radixSort(arr) {\n    const max = getMax(arr); // length of the max digit in the array\n\n    for (let i = 0; i < max; i++) {\n      let buckets = Array.from({ length: 10 }, () => []);\n      for (let j = 0; j < arr.length; j++) {\n        buckets[getPosition(arr[j], i)].push(arr[j]); // pushing into buckets\n        var bar = document.getElementById(i).style;\n        bar.backgroundColor = \"#6A5ACD\";\n      }\n\n      await sleep(animationSpeed + 300);\n\n      var animArr = [];\n      for (var c = 0; c < ARRAYSIZE / 10; c++) {\n        animArr.push(randomVals(0, ARRAYSIZE - 1));\n      }\n\n      animArr.forEach((val) => {\n        var bar = document.getElementById(val).style;\n        bar.backgroundColor = \"#DC143C\";\n        playBeep1();\n      });\n\n      var animArr2 = [];\n      for (var c = 0; c < ARRAYSIZE / 10; c++) {\n        animArr2.push(randomVals(0, ARRAYSIZE - 1));\n      }\n\n      animArr2.forEach((val) => {\n        var bar = document.getElementById(val).style;\n        bar.backgroundColor = \"#6A5ACD\";\n        playBeep2();\n      });\n\n      arr = [].concat(...buckets);\n      setPrimaryArray(arr);\n    }\n\n    finishedAnimation();\n\n    return arr;\n  }\n\n  function getMax(arr) {\n    let max = 0;\n    for (let num of arr) {\n      if (max < num.toString().length) {\n        max = num.toString().length;\n      }\n    }\n    return max;\n  }\n\n  function getPosition(num, place) {\n    var result = Math.floor(Math.abs(num) / Math.pow(10, place)) % 10;\n    return result;\n  }\n\n  return (\n    <div className=\"sortingVisualizer\">\n      <div className=\"header\">\n        {/* Algorithm Buttons */}\n        <div className=\"headerBttns\">\n          <button onClick={randomizeArray}>New Array</button>\n          <button onClick={bubbleSort}>Bubble Sort</button>\n          <button onClick={heapSort}>Heap Sort</button>\n          <button\n            onClick={() => {\n              mergeSort(primaryArray);\n              setTimeout(finishedAnimation, 2000);\n            }}\n          >\n            Merge Sort\n          </button>\n          <button onClick={quickSort}>Quick Sort</button>\n          {/* <button onClick={radixCaller}>Radix Sort</button> */}\n        </div>\n      </div>\n\n      <div className=\"arrayControllers\">\n        <button\n          id=\"restart\"\n          onClick={() => {\n            window.location.reload(false);\n          }}\n        >\n          {\" \"}\n          Restart\n        </button>\n        <div id=\"velocity\">\n          <button\n            onClick={() => {\n              setAnimationSpeed(80);\n            }}\n            id={animationSpeed == 80 ? \"selected\" : \"\"}\n          >\n            Slow\n          </button>\n          <button\n            onClick={() => {\n              setAnimationSpeed(40);\n            }}\n            id={animationSpeed == 40 ? \"selected\" : \"\"}\n          >\n            Medium\n          </button>\n          <button\n            onClick={() => {\n              setAnimationSpeed(5);\n            }}\n            id={animationSpeed == 5 ? \"selected\" : \"\"}\n          >\n            Fast\n          </button>\n        </div>\n        <div className=\"toggle\">\n          <Toggle\n            defaultChecked={soundOn}\n            icons={false}\n            onChange={() => {\n              setSoundOn(!soundOn);\n            }}\n          />\n          <span id=\"soundLabel\">Sound {soundOn ? \"On\" : \"Off\"}</span>\n        </div>\n      </div>\n      <div className=\"arrayContainer\">\n        {primaryArray &&\n          primaryArray.map((val, key) => {\n            return (\n              <div\n                className=\"bar\"\n                id={key}\n                key={key}\n                style={{ height: val }}\n              ></div>\n            );\n          })}\n      </div>\n\n      {algorithm.name != undefined && (\n        <div className=\"algorithmInfo\">\n          <>\n            <div id=\"name\">Algorithm: {algorithm.name}</div>\n            <div id=\"timeComplexity\">\n              Time Complexity: {algorithm.timeComplexity}{\" \"}\n            </div>\n          </>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport SortingVisualizer from \"./Visualizer/SortingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}